{"ast":null,"code":"export default {\n  name: \"LayoutHeader\",\n  data() {\n    return {\n      // isActive: false,\n      gnbList: ['about', 'works', 'contact']\n    };\n  },\n  mounted() {\n    this.txtScroll();\n    this.goMenu();\n    this.handleScroll();\n  },\n  methods: {\n    // gnb메뉴 text-section 지났을 때 클래스 추가\n    // 조금 손 봐야함\n    txtScroll() {\n      // let header = document.querySelector('.portfolio-header');\n      // const textSection = document.querySelector('.text-section');\n\n      // window.addEventListener('scroll', function() {\n      //   const sectionRect = textSection.getBoundingClientRect();\n\n      //   console.log('sectionRect.top == 0', sectionRect.top == 0)\n\n      //   if (sectionRect.top <= window.innerHeight * -0.5 && sectionRect.bottom >= 0) {\n      //     header.classList.add('is-color');\n      //   } else if(sectionRect.top >= 0) {\n      //     header.classList.remove('is-color');\n      //   }\n      // });\n\n      // 헤더와 텍스트 섹션을 선택\n      let header = document.querySelector('.portfolio-header');\n      let textSection = document.querySelector('.text-section');\n\n      // 스크롤 이벤트 리스너 추가\n      window.addEventListener('scroll', function () {\n        // 텍스트 섹션의 위치를 확인\n        let sectionRect = textSection.getBoundingClientRect();\n\n        // 텍스트 섹션이 뷰포트에 보이면 헤더에 클래스 추가\n        if (sectionRect.top <= 0 && sectionRect.bottom >= 0) {\n          header.classList.add('is-color');\n        } else {\n          header.classList.remove('is-color');\n        }\n      });\n    },\n    goMenu(section) {\n      const targetSection = document.querySelector(`#${section}-section`);\n      if (targetSection) {\n        targetSection.scrollIntoView({\n          behavior: \"smooth\"\n        });\n      }\n    },\n    handleScroll() {\n      let lastScrollY = 0;\n      window.addEventListener(\"scroll\", function () {\n        let header = document.querySelector(\".portfolio-header\");\n        let currentScrollY = window.scrollY;\n        if (currentScrollY === 0 || currentScrollY < lastScrollY || currentScrollY < 84) {\n          header.classList.remove(\"is-scroll\");\n        } else if (currentScrollY > lastScrollY) {\n          header.classList.add(\"is-scroll\");\n        }\n        lastScrollY = currentScrollY;\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","gnbList","mounted","txtScroll","goMenu","handleScroll","methods","header","document","querySelector","textSection","window","addEventListener","sectionRect","getBoundingClientRect","top","bottom","classList","add","remove","section","targetSection","scrollIntoView","behavior","lastScrollY","currentScrollY","scrollY"],"sources":["/Users/jiheek/Desktop/doc/private/250304_portfolio/portfiolio/src/views/components/layouts/LayoutHeader.vue"],"sourcesContent":["<template>\r\n  <div class=\"portfolio-header\" :class=\"{ 'is-color': isActive }\">\r\n    <div class=\"hd-center\">\r\n      <div class=\"hd-wrap\">\r\n        <h1 class=\"logo\"><a href=\"#\">Kim <br>Jihee</a></h1>\r\n        <nav class=\"gnb-nav\">\r\n          <ul class=\"gnb-menu\">\r\n            <li class=\"gnb-list\" v-for=\"item in gnbList\" :key=\"item\">\r\n              <a href=\"javascript:void(0)\"  class=\"gnb-link\" @click=\"goMenu(item)\">{{ item }}</a>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"LayoutHeader\",\r\n  data() {\r\n    return {\r\n      // isActive: false,\r\n      gnbList: ['about', 'works', 'contact'],\r\n    }\r\n  },\r\n  mounted () {\r\n    this.txtScroll();\r\n    this.goMenu();\r\n    this.handleScroll();\r\n  },\r\n  methods: {\r\n    // gnb메뉴 text-section 지났을 때 클래스 추가\r\n    // 조금 손 봐야함\r\n    txtScroll() {\r\n      // let header = document.querySelector('.portfolio-header');\r\n      // const textSection = document.querySelector('.text-section');\r\n\r\n      // window.addEventListener('scroll', function() {\r\n      //   const sectionRect = textSection.getBoundingClientRect();\r\n\r\n      //   console.log('sectionRect.top == 0', sectionRect.top == 0)\r\n\r\n      //   if (sectionRect.top <= window.innerHeight * -0.5 && sectionRect.bottom >= 0) {\r\n      //     header.classList.add('is-color');\r\n      //   } else if(sectionRect.top >= 0) {\r\n      //     header.classList.remove('is-color');\r\n      //   }\r\n      // });\r\n\r\n\r\n      // 헤더와 텍스트 섹션을 선택\r\nlet header = document.querySelector('.portfolio-header');\r\nlet textSection = document.querySelector('.text-section');\r\n\r\n// 스크롤 이벤트 리스너 추가\r\nwindow.addEventListener('scroll', function() {\r\n  // 텍스트 섹션의 위치를 확인\r\n  let sectionRect = textSection.getBoundingClientRect();\r\n\r\n  // 텍스트 섹션이 뷰포트에 보이면 헤더에 클래스 추가\r\n  if (sectionRect.top <= 0 && sectionRect.bottom >= 0) {\r\n    header.classList.add('is-color');\r\n  } else {\r\n    header.classList.remove('is-color');\r\n  }\r\n});\r\n\r\n    },\r\n    goMenu(section) {\r\n      const targetSection = document.querySelector(`#${section}-section`);\r\n      if (targetSection) {\r\n        targetSection.scrollIntoView({ behavior: \"smooth\" });\r\n      }\r\n    },\r\n    handleScroll () {\r\n      let lastScrollY = 0;\r\n\r\n      window.addEventListener(\"scroll\", function () {\r\n          let header = document.querySelector(\".portfolio-header\");\r\n          let currentScrollY = window.scrollY;\r\n\r\n          if (currentScrollY === 0 || currentScrollY < lastScrollY || currentScrollY < 84) {\r\n              header.classList.remove(\"is-scroll\");\r\n          } else if (currentScrollY > lastScrollY) {\r\n              header.classList.add(\"is-scroll\");\r\n          }\r\n\r\n          lastScrollY = currentScrollY;\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n"],"mappings":"AAiBA,eAAe;EACbA,IAAI,EAAE,cAAc;EACpBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACL;MACAC,OAAO,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS;IACvC;EACF,CAAC;EACDC,OAAMA,CAAA,EAAK;IACT,IAAI,CAACC,SAAS,CAAC,CAAC;IAChB,IAAI,CAACC,MAAM,CAAC,CAAC;IACb,IAAI,CAACC,YAAY,CAAC,CAAC;EACrB,CAAC;EACDC,OAAO,EAAE;IACP;IACA;IACAH,SAASA,CAAA,EAAG;MACV;MACA;;MAEA;MACA;;MAEA;;MAEA;MACA;MACA;MACA;MACA;MACA;;MAGA;MACN,IAAII,MAAK,GAAIC,QAAQ,CAACC,aAAa,CAAC,mBAAmB,CAAC;MACxD,IAAIC,WAAU,GAAIF,QAAQ,CAACC,aAAa,CAAC,eAAe,CAAC;;MAEzD;MACAE,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,YAAW;QAC3C;QACA,IAAIC,WAAU,GAAIH,WAAW,CAACI,qBAAqB,CAAC,CAAC;;QAErD;QACA,IAAID,WAAW,CAACE,GAAE,IAAK,KAAKF,WAAW,CAACG,MAAK,IAAK,CAAC,EAAE;UACnDT,MAAM,CAACU,SAAS,CAACC,GAAG,CAAC,UAAU,CAAC;QAClC,OAAO;UACLX,MAAM,CAACU,SAAS,CAACE,MAAM,CAAC,UAAU,CAAC;QACrC;MACF,CAAC,CAAC;IAEE,CAAC;IACDf,MAAMA,CAACgB,OAAO,EAAE;MACd,MAAMC,aAAY,GAAIb,QAAQ,CAACC,aAAa,CAAC,IAAIW,OAAO,UAAU,CAAC;MACnE,IAAIC,aAAa,EAAE;QACjBA,aAAa,CAACC,cAAc,CAAC;UAAEC,QAAQ,EAAE;QAAS,CAAC,CAAC;MACtD;IACF,CAAC;IACDlB,YAAWA,CAAA,EAAK;MACd,IAAImB,WAAU,GAAI,CAAC;MAEnBb,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,YAAY;QAC1C,IAAIL,MAAK,GAAIC,QAAQ,CAACC,aAAa,CAAC,mBAAmB,CAAC;QACxD,IAAIgB,cAAa,GAAId,MAAM,CAACe,OAAO;QAEnC,IAAID,cAAa,KAAM,KAAKA,cAAa,GAAID,WAAU,IAAKC,cAAa,GAAI,EAAE,EAAE;UAC7ElB,MAAM,CAACU,SAAS,CAACE,MAAM,CAAC,WAAW,CAAC;QACxC,OAAO,IAAIM,cAAa,GAAID,WAAW,EAAE;UACrCjB,MAAM,CAACU,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC;QACrC;QAEAM,WAAU,GAAIC,cAAc;MAChC,CAAC,CAAC;IACJ;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}